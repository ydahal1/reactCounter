{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["divStyle","textAlign","marginTop","padding","btnDiv","margin","fontSize","fontWeight","paddingRight","paddingLeft","counterStyle","negativeCounterStyle","color","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increaseCounter","bind","assertThisInitialized","decreaseCounter","resetCounter","state","counter","setState","prevState","react_default","a","createElement","style","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,SAAW,CACfC,UAAW,SACXC,UAAW,OACXC,QAAS,SAGLC,EAAS,CACbC,OAAQ,OACRC,SAAU,OACVC,WAAY,OACZC,aAAc,OACdC,YAAa,QAGTC,EAAe,CACnBJ,SAAU,QACVC,WAAY,QAGRI,EAAuB,CAC3BL,SAAU,QACVC,WAAY,OACZK,MAAO,OAsEMC,cAlEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,gBAAkBP,EAAKO,gBAAgBC,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKU,gBAAkBV,EAAKU,gBAAgBF,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKW,aAAeX,EAAKW,aAAaH,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKY,MAAQ,CACXC,QAAS,GANMb,iFAYjBG,KAAKW,SAAS,SAAAC,GACZ,MAAO,CAAEF,QAASE,EAAUF,QAAU,+CAKxCV,KAAKW,SAAS,SAAAC,GACZ,MAAO,CACLF,QAASE,EAAUF,QAAU,4CAMjCV,KAAKW,SAAS,SAAAC,GACZ,MAAO,CAAEF,QAAS,sCAKpB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,GACV+B,EAAAC,EAAAC,cAAA,OACEC,MAAOhB,KAAKS,MAAMC,SAAW,EAAIlB,EAAeC,GAE/CO,KAAKS,MAAMC,SAEdG,EAAAC,EAAAC,cAAA,UACEC,MAAO9B,EACP+B,UAAU,kBACVC,QAASlB,KAAKI,iBAHhB,KAQAS,EAAAC,EAAAC,cAAA,UACEC,MAAO9B,EACP+B,UAAU,kBACVC,QAASlB,KAAKQ,cAHhB,SAOAK,EAAAC,EAAAC,cAAA,UACEC,MAAO9B,EACP+B,UAAU,kBACVC,QAASlB,KAAKO,iBAHhB,aAvDUY,aCjBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cea45b73.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n//CSS Styling\nconst divStyle = {\n  textAlign: \"center\",\n  marginTop: \"30px\",\n  padding: \"40px\"\n};\n\nconst btnDiv = {\n  margin: \"10px\",\n  fontSize: \"35px\",\n  fontWeight: \"bold\",\n  paddingRight: \"20px\",\n  paddingLeft: \"20px\"\n};\n\nconst counterStyle = {\n  fontSize: \"265px\",\n  fontWeight: \"bold\"\n};\n\nconst negativeCounterStyle = {\n  fontSize: \"265px\",\n  fontWeight: \"bold\",\n  color: \"red\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.increaseCounter = this.increaseCounter.bind(this);\n    this.decreaseCounter = this.decreaseCounter.bind(this);\n    this.resetCounter = this.resetCounter.bind(this);\n    this.state = {\n      counter: 0\n    };\n  }\n\n  //Functions\n  increaseCounter() {\n    this.setState(prevState => {\n      return { counter: prevState.counter + 1 };\n    });\n  }\n\n  decreaseCounter() {\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter - 1\n      };\n    });\n  }\n\n  resetCounter() {\n    this.setState(prevState => {\n      return { counter: 0 };\n    });\n  }\n\n  render() {\n    return (\n      <div style={divStyle}>\n        <div\n          style={this.state.counter >= 0 ? counterStyle : negativeCounterStyle}\n        >\n          {this.state.counter}\n        </div>\n        <button\n          style={btnDiv}\n          className=\"btn btn-success\"\n          onClick={this.increaseCounter}\n        >\n          +\n        </button>\n\n        <button\n          style={btnDiv}\n          className=\"btn btn-success\"\n          onClick={this.resetCounter}\n        >\n          Reset\n        </button>\n        <button\n          style={btnDiv}\n          className=\"btn btn-success\"\n          onClick={this.decreaseCounter}\n        >\n          -\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}